name: ci-artifacts

on:
  push:

env:
  LC_CTYPE: C.UTF-8

jobs:
  test-minimal-sdk:
    runs-on: windows-latest
    strategy:
      matrix:
        # 0..16 permuted according to the matrix builds' timings as of git/git@9fadedd63
        nr: [5]
    steps:
      - name: start VS Code tunnel
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # First get the current user's GPG key
          gh api users/${{ github.actor }}/gpg_keys --jq '.[0].raw_key' |
          gpg --import >/tmp/gpg.import 2>&1 &&
          GPGKEY="$(sed -n 's/^gpg: key \([^:]*\).*/\1/p' /tmp/gpg.import)" &&
          test -n "$GPGKEY" &&
          echo "Using GPG key $GPGKEY" || {
            echo "::error::could not get user's GPG key" >&2
            exit 1
          }

          curl -Lo /tmp/vscode-cli.zip 'https://code.visualstudio.com/sha/download?build=stable&os=cli-win32-x64' &&
          unzip -p /tmp/vscode-cli.zip code.exe >/tmp/vscode-cli.exe &&

          name="$(echo "$GITHUB_JOB-$GITHUB_RUN_ID" |
            sed -e 's/[^A-Za-z0-9_]/-/g' -e 's/--*/-/g' -e 's/^-*//' -e 's/^\(.\{1,20\}\).*/\1/')"
          echo "::notice::Starting a tunnel with name '$name'" >&2
          /tmp/vscode-cli.exe tunnel --accept-server-license-terms --name "$name" >/tmp/vscode-tunnel.out &

          display_message () {
            printf '%s\n' \
              "Please decrypt the output of 'code tunnel' by calling these commands" \
              '' \
              'cat <<EOF >/tmp/vscode.gpg &&' \
              "$(gpg --batch --trust-model always --recipient "$GPGKEY" \
                --pinentry-mode=loopback --encrypt --armor </tmp/vscode-tunnel.out)" \
              'EOF' \
              'gpg --decrypt /tmp/vscode.gpg'
          }

          while true
          do
            sleep 15
            # Make sure the contents of vscode-tunnel.out is not displaye, as it contains the secret device code and URL!
            if grep -q "Open this link in your browser" /tmp/vscode-tunnel.out >/dev/null 2>&1
            then
              echo "::notice::Tunnel is ready to go"
              display_message
              exit 0
            # Technically, the device code is not a secret. But it will grant
            # access _to the tunnel_, i.e. to the machine running the current
            # GitHub workflow job, including all the code and the secrets...
            elif grep -q "To grant access to the server" /tmp/vscode-tunnel.out >/dev/null 2>&1
            then
              echo "::notice::Tunnel needs to be granted access"
              display_message
            fi
          done
      - name: reuse artifacts
        shell: bash
        run: |
          run_id=4993397800 &&

          curl -L https://api.github.com/repos/git-for-windows/git-sdk-64/actions/runs/$run_id/artifacts |
          jq -r '.artifacts[] | [.name, .archive_download_url] | @tsv' |
          tr -d '\r' |
          while read name url
          do
            echo "$name"
            curl -H "Authorization: token ${{secrets.GITHUB_TOKEN}}" \
              -#sLo /tmp/"$name".zip "$url" &&
            unzip -q /tmp/"$name".zip
          done
      - name: uncompress minimal-sdk
        shell: bash
        run: |
          mkdir -p minimal-sdk &&
          tar -C minimal-sdk -xzf git-sdk-64-minimal.tar.gz &&
          minimal-sdk/init.sh
      - name: uncompress git-artifacts
        shell: bash
        run: tar -C .. -xzf git-artifacts.tar.gz
      - name: test
        shell: bash
        run: |
          set -x
          test "$(cygpath -aw /)" = "${{github.workspace}}\minimal-sdk" || exit 1
          cd ../git/t &&
          echo T="$(ls -S t[0-9]*.sh | awk '!((NR+${{matrix.nr}})%17)' | tr '\n' \ )" >/tmp/a1 &&
          make T=t3701-add-interactive.sh prove || {
            for d in trash*
            do
              t=${d#trash directory.}
              echo ===========================
              echo Failed: $t.sh
              cat test-results/$t.out
            done
            exit 1
          }
        env:
          PATH: ${{github.workspace}}\minimal-sdk\mingw64\bin;${{github.workspace}}\minimal-sdk\usr\bin;${{github.workspace}}\minimal-sdk\usr\bin\core_perl;C:\Windows\system32;C:\Windows;C:\Windows\system32\wbem
          GIT_TEST_OPTS: --verbose-log -x --no-chain-lint
          GIT_PROVE_OPTS: --timer --jobs 8
          NO_SVN_TESTS: 1
      - name: wait for VSCode tunnel to be done
        if: success() || failure()
        shell: bash
        run: |
          while test -f /tmp/vscode-cli.exe
          do
            case "$(/tmp/vscode-cli.exe tunnel status)" in
            *"no tunnel process is currently running"*) exit 0;;
            esac
            echo '::notice::Waiting for tunnel to be terminated'
            echo '(please run `/tmp/vscode-cli.exe tunnel kill` in the integrated terminal)'
            sleep 15
          done
      - name: unregister VSCode tunnel
        if: always()
        shell: bash
        run: /tmp/vscode-cli.exe tunnel unregister
  